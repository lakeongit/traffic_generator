import csv
import random

# Example vulnerability data
vulnerabilities = [
    {
        'id': 'CVE-2023-0001',
        'name': 'Weak Password Policy',
        'severity': 'Low',
        'description': 'The system enforces weak password policies.',
        'solution': 'Implement a strong password policy and enforce password complexity requirements.',
    },
    {
        'id': 'CVE-2023-0002',
        'name': 'Outdated Software',
        'severity': 'Medium',
        'description': 'The system is running outdated software with known security vulnerabilities.',
        'solution': 'Update the software to the latest version to patch known vulnerabilities.',
    },
    {
        'id': 'CVE-2023-0003',
        'name': 'SQL Injection',
        'severity': 'Critical',
        'description': 'The application is vulnerable to SQL injection attacks.',
        'solution': 'Apply proper input validation and use prepared statements or parameterized queries.',
    },
    # Add more vulnerabilities with varying severity levels here
    {
        'id': 'CVE-2023-0004',
        'name': 'Cross-Site Scripting (XSS)',
        'severity': 'High',
        'description': 'The application is vulnerable to cross-site scripting attacks.',
        'solution': 'Implement output encoding and sanitize user inputs.',
    },
    {
        'id': 'CVE-2023-0005',
        'name': 'Remote Code Execution',
        'severity': 'Critical',
        'description': 'The application allows remote code execution.',
        'solution': 'Apply strong input validation, implement security patches, and configure proper access controls.',
    },
    # Add more vulnerabilities here
]

# Additional vulnerabilities
additional_vulnerabilities = [
    {
        'id': 'CVE-2023-0021',
        'name': 'Insecure Direct Object References',
        'severity': 'Medium',
        'description': 'The application exposes internal object references, allowing unauthorized access to sensitive data.',
        'solution': 'Implement proper access controls and authorization checks for object references.',
    },
    {
        'id': 'CVE-2023-0022',
        'name': 'Sensitive Data Exposure',
        'severity': 'High',
        'description': 'The application does not properly protect sensitive data, making it vulnerable to unauthorized access.',
        'solution': 'Encrypt sensitive data at rest and in transit, and follow security best practices for data protection.',
    },
    # Add more additional vulnerabilities here
]

# Function to generate a random vulnerability
def generate_vulnerability(used_ids):
    all_vulnerabilities = vulnerabilities + additional_vulnerabilities
    unused_vulnerabilities = [vuln for vuln in all_vulnerabilities if vuln['id'] not in used_ids]
    if not unused_vulnerabilities:
        return None  # No more unique vulnerabilities available
    vulnerability = random.choice(unused_vulnerabilities)
    return vulnerability

# Generating at least 100 unique vulnerabilities
fieldnames = ['Vulnerability ID', 'Name', 'Severity', 'Description', 'Solution']

used_ids = set()

with open('vulnerability_dataset.csv', 'w', newline='') as csvfile:
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
    writer.writeheader()

    for _ in range(100):
        vulnerability = generate_vulnerability(used_ids)
        if vulnerability is None:
            print("Not enough unique vulnerabilities available.")
            break
        used_ids.add(vulnerability['id'])
        writer.writerow({
            'Vulnerability ID': vulnerability['id'],
            'Name': vulnerability['name'],
            'Severity': vulnerability['severity'],
            'Description': vulnerability['description'],
            'Solution': vulnerability['solution']
        })

print("Vulnerabilities written to vulnerability_dataset.csv.")
